{"version":3,"sources":["Board/Board.jsx","lib/utils.js","App.js","index.js"],"names":["LinkedListNode","value","this","next","LinkedList","node","head","tail","Direction","Speed","getStartingSnakeLLValue","board","rowSize","length","colSize","startingRow","Math","round","startingCol","row","col","cell","console","log","createBoard","BOARD_SIZE","counter","currentRow","push","getCoordsInDirection","coords","direction","isOutOfBounds","getDirectionFromKey","key","getNextNodeDirection","currentDirection","currentCol","nextRow","nextCol","getGrowthNodeCoords","snakeTail","tailNextNodeDirection","growthDirection","getOppositeDirection","currentTailCoords","getCellClassName","cellValue","foodCell","foodShouldReverseDirection","snakeCells","className","has","Board","useState","score","setScore","snake","setSnake","Set","setSnakeCells","speed","setSpeed","setFoodCell","setDirection","setFoodShouldReverseDirection","useEffect","window","addEventListener","e","handleKeydown","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","moveSnake","newDirection","size","currentHeadCoords","nextHeadCoords","handleGameOver","nextHeadCell","newHead","currentHead","newSnakeCells","delete","add","growSnake","reverseSnake","handleFoodConsumption","growthNodeCoords","newTailCell","newTail","currentTail","previousNode","currentNode","nextNode","reverseLinkedList","snakeHead","nextFoodCell","min","max","floor","random","nextFoodShouldReverseDirection","snakeLLStartingValue","style","float","onChange","target","handleChange","disabled","paddingTop","onClick","map","rowIdx","cellIdx","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.31714cc7.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  randomIntFromInterval,\n  reverseLinkedList,\n  useInterval,\n} from '../lib/utils.js';\n\nimport './Board.css';\n\n/**\n * TODO: add a more elegant UX for before a game starts and after a game ends.\n * A game probably shouldn't start until the user presses an arrow key, and\n * once a game is over, the board state should likely freeze until the user\n * intentionally restarts the game.\n */\n\nclass LinkedListNode {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\nclass LinkedList {\n  constructor(value) {\n    const node = new LinkedListNode(value);\n    this.head = node;\n    this.tail = node;\n  }\n}\n\nconst Direction = {\n  UP: 'UP',\n  RIGHT: 'RIGHT',\n  DOWN: 'DOWN',\n  LEFT: 'LEFT',\n};\n\nconst Speed = {\n  BEGINNER: 200,\n  INTERMEDIATE: 150,\n  PRO: 90\n};\n\nconst BOARD_SIZE = 15;\nconst PROBABILITY_OF_DIRECTION_REVERSAL_FOOD = 0.2;\n\nconst getStartingSnakeLLValue = board => {\n  const rowSize = board.length;\n  const colSize = board[0].length;\n  const startingRow = Math.round(rowSize / 3);\n  const startingCol = Math.round(colSize / 3);\n  const startingCell = board[startingRow][startingCol];\n\n  return {\n    row: startingRow,\n    col: startingCol,\n    cell: startingCell,\n  };\n};\n\nconsole.log(\"hello\");\nconst Board = () => {\n  console.log(\"inside Board\")\n  const [score, setScore] = useState(0);\n  const [board, setBoard] = useState(createBoard(BOARD_SIZE));\n  const [snake, setSnake] = useState(\n    new LinkedList(getStartingSnakeLLValue(board)),\n  );\n  const [snakeCells, setSnakeCells] = useState(\n    new Set([snake.head.value.cell]),\n  );\n  const [speed, setSpeed] = useState(Speed.BEGINNER);\n\n  // Naively set the starting food cell 5 cells away from the starting snake cell.\n  const [foodCell, setFoodCell] = useState(snake.head.value.cell + 5);\n  const [direction, setDirection] = useState(Direction.RIGHT);\n  const [foodShouldReverseDirection, setFoodShouldReverseDirection] = useState(\n    false,\n  );\n  \n\n  useEffect(() => {\n    window.addEventListener('keydown', e => {\n      handleKeydown(e);\n    });\n  }, []);\n  useInterval(() => {\n\n    moveSnake();\n  }, speed);\n\n  // `useInterval` is needed; you can't naively do `setInterval` in the\n  // `useEffect` above. See the article linked above the `useInterval`\n  // definition for details.\n\n  const handleKeydown = e => {\n    const newDirection = getDirectionFromKey(e.key);\n    const isValidDirection = newDirection !== '';\n    if (!isValidDirection) return;\n    const snakeWillRunIntoItself =\n      getOppositeDirection(newDirection) === direction && snakeCells.size > 1;\n    // Note: this functionality is currently broken, for the same reason that\n    // `useInterval` is needed. Specifically, the `direction` and `snakeCells`\n    // will currently never reflect their \"latest version\" when `handleKeydown`\n    // is called. I leave it as an exercise to the viewer to fix this :P\n    if (snakeWillRunIntoItself) return;\n    setDirection(newDirection);\n  };\n\n  const moveSnake = () => {\n    const currentHeadCoords = {\n      row: snake.head.value.row,\n      col: snake.head.value.col,\n    };\n\n    const nextHeadCoords = getCoordsInDirection(currentHeadCoords, direction);\n    if (isOutOfBounds(nextHeadCoords, board)) {\n      handleGameOver();\n      return;\n    }\n    const nextHeadCell = board[nextHeadCoords.row][nextHeadCoords.col];\n    if (snakeCells.has(nextHeadCell)) {\n      handleGameOver();\n      return;\n    }\n\n    const newHead = new LinkedListNode({\n      row: nextHeadCoords.row,\n      col: nextHeadCoords.col,\n      cell: nextHeadCell,\n    });\n    const currentHead = snake.head;\n    snake.head = newHead;\n    currentHead.next = newHead;\n\n    const newSnakeCells = new Set(snakeCells);\n    newSnakeCells.delete(snake.tail.value.cell);\n    newSnakeCells.add(nextHeadCell);\n\n    snake.tail = snake.tail.next;\n    if (snake.tail === null) snake.tail = snake.head;\n\n    const foodConsumed = nextHeadCell === foodCell;\n    if (foodConsumed) {\n      // This function mutates newSnakeCells.\n      growSnake(newSnakeCells);\n      if (foodShouldReverseDirection) reverseSnake();\n      handleFoodConsumption(newSnakeCells);\n    }\n\n    setSnakeCells(newSnakeCells);\n  };\n\n  // This function mutates newSnakeCells.\n  const growSnake = newSnakeCells => {\n    const growthNodeCoords = getGrowthNodeCoords(snake.tail, direction);\n    if (isOutOfBounds(growthNodeCoords, board)) {\n      // Snake is positioned such that it can't grow; don't do anything.\n      return;\n    }\n    const newTailCell = board[growthNodeCoords.row][growthNodeCoords.col];\n    const newTail = new LinkedListNode({\n      row: growthNodeCoords.row,\n      col: growthNodeCoords.col,\n      cell: newTailCell,\n    });\n    const currentTail = snake.tail;\n    snake.tail = newTail;\n    snake.tail.next = currentTail;\n\n    newSnakeCells.add(newTailCell);\n  };\n\n  const reverseSnake = () => {\n    const tailNextNodeDirection = getNextNodeDirection(snake.tail, direction);\n    const newDirection = getOppositeDirection(tailNextNodeDirection);\n    setDirection(newDirection);\n\n    // The tail of the snake is really the head of the linked list, which\n    // is why we have to pass the snake's tail to `reverseLinkedList`.\n    reverseLinkedList(snake.tail);\n    const snakeHead = snake.head;\n    snake.head = snake.tail;\n    snake.tail = snakeHead;\n  };\n\n  const handleFoodConsumption = newSnakeCells => {\n    const maxPossibleCellValue = BOARD_SIZE * BOARD_SIZE;\n    let nextFoodCell;\n    // In practice, this will never be a time-consuming operation. Even\n    // in the extreme scenario where a snake is so big that it takes up 90%\n    // of the board (nearly impossible), there would be a 10% chance of generating\n    // a valid new food cell--so an average of 10 operations: trivial.\n    while (true) {\n      nextFoodCell = randomIntFromInterval(1, maxPossibleCellValue);\n      if (newSnakeCells.has(nextFoodCell) || foodCell === nextFoodCell)\n        continue;\n      break;\n    }\n\n    const nextFoodShouldReverseDirection =\n      Math.random() < PROBABILITY_OF_DIRECTION_REVERSAL_FOOD;\n\n    setFoodCell(nextFoodCell);\n    setFoodShouldReverseDirection(nextFoodShouldReverseDirection);\n    setScore(score + 1);\n  };\n\n  const handleGameOver = () => {\n    setScore(0);\n    const snakeLLStartingValue = getStartingSnakeLLValue(board);\n    setSnake(new LinkedList(snakeLLStartingValue));\n    setFoodCell(snakeLLStartingValue.cell + 5);\n    setSnakeCells(new Set([snakeLLStartingValue.cell]));\n    setDirection(Direction.RIGHT);\n  };\n  const handleChange = (e) => {\n    let value = e.target.value;\n    if (value == \"BEGINNER\") {\n      setSpeed(Speed.BEGINNER);\n\n    }\n    else if (value == \"INTERMEDIATE\") {\n      setSpeed(Speed.INTERMEDIATE)\n    }\n    else {\n      setSpeed(Speed.PRO)\n    }\n\n  };\n  return (\n    <>\n      <div>\n        <h3 style={{ float: \"top\" }}>Choose level :</h3>\n        <div style={{ float: \"center\" }} >\n          <select className=\"level\"\n            onChange={(e) => handleChange(e)} disabled={false}>\n            <option className=\"value\" value=\"BEGINNER\">Beginner</option>\n            <option className=\"value\" value=\"INTERMEDIATE\">Intermediate</option>\n            <option className=\"value\" value=\"PRO\">Pro</option>\n          </select>\n        </div>\n      </div>\n      <div style={{ paddingTop: \"10px\" }}>\n        <button className=\"start\" >START</button>\n        <button className=\"stop\" onClick={() => handleGameOver()} >STOP</button>\n      </div>\n      <h2>Score: {score}</h2>\n      <div className=\"board\">\n        {board.map((row, rowIdx) => (\n          <div key={rowIdx} className=\"row\">\n            {row.map((cellValue, cellIdx) => {\n              const className = getCellClassName(\n                cellValue,\n                foodCell,\n                foodShouldReverseDirection,\n                snakeCells,\n              );\n              return <div key={cellIdx} className={className}></div>;\n            })}\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n\nconst createBoard = BOARD_SIZE => {\n  let counter = 1;\n  const board = [];\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    const currentRow = [];\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      currentRow.push(counter++);\n    }\n    board.push(currentRow);\n  }\n  return board;\n};\n\nconst getCoordsInDirection = (coords, direction) => {\n  if (direction === Direction.UP) {\n    return {\n      row: coords.row - 1,\n      col: coords.col,\n    };\n  }\n  if (direction === Direction.RIGHT) {\n    return {\n      row: coords.row,\n      col: coords.col + 1,\n    };\n  }\n  if (direction === Direction.DOWN) {\n    return {\n      row: coords.row + 1,\n      col: coords.col,\n    };\n  }\n  if (direction === Direction.LEFT) {\n    return {\n      row: coords.row,\n      col: coords.col - 1,\n    };\n  }\n};\n\nconst isOutOfBounds = (coords, board) => {\n  const { row, col } = coords;\n  if (row < 0 || col < 0) return true;\n  if (row >= board.length || col >= board[0].length) return true;\n  return false;\n};\n\nconst getDirectionFromKey = key => {\n  if (key === 'ArrowUp') return Direction.UP;\n  if (key === 'ArrowRight') return Direction.RIGHT;\n  if (key === 'ArrowDown') return Direction.DOWN;\n  if (key === 'ArrowLeft') return Direction.LEFT;\n  return '';\n};\n\nconst getNextNodeDirection = (node, currentDirection) => {\n  if (node.next === null) return currentDirection;\n  const { row: currentRow, col: currentCol } = node.value;\n  const { row: nextRow, col: nextCol } = node.next.value;\n  if (nextRow === currentRow && nextCol === currentCol + 1) {\n    return Direction.RIGHT;\n  }\n  if (nextRow === currentRow && nextCol === currentCol - 1) {\n    return Direction.LEFT;\n  }\n  if (nextCol === currentCol && nextRow === currentRow + 1) {\n    return Direction.DOWN;\n  }\n  if (nextCol === currentCol && nextRow === currentRow - 1) {\n    return Direction.UP;\n  }\n  return '';\n};\n\nconst getGrowthNodeCoords = (snakeTail, currentDirection) => {\n  const tailNextNodeDirection = getNextNodeDirection(\n    snakeTail,\n    currentDirection,\n  );\n  const growthDirection = getOppositeDirection(tailNextNodeDirection);\n  const currentTailCoords = {\n    row: snakeTail.value.row,\n    col: snakeTail.value.col,\n  };\n  const growthNodeCoords = getCoordsInDirection(\n    currentTailCoords,\n    growthDirection,\n  );\n  return growthNodeCoords;\n};\n\nconst getOppositeDirection = direction => {\n  if (direction === Direction.UP) return Direction.DOWN;\n  if (direction === Direction.RIGHT) return Direction.LEFT;\n  if (direction === Direction.DOWN) return Direction.UP;\n  if (direction === Direction.LEFT) return Direction.RIGHT;\n};\n\nconst getCellClassName = (\n  cellValue,\n  foodCell,\n  foodShouldReverseDirection,\n  snakeCells,\n) => {\n  let className = 'cell';\n  if (cellValue === foodCell) {\n    if (foodShouldReverseDirection) {\n      className = 'cell cell-purple';\n    } else {\n      className = 'cell cell-red';\n    }\n  }\n  if (snakeCells.has(cellValue)) className = 'cell cell-green';\n\n  return className;\n};\n\nexport default Board;\n","import {useEffect, useRef} from 'react';\n\n// Copied from https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nexport function randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// Copied from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport function reverseLinkedList(head) {\n  let previousNode = null;\n  let currentNode = head;\n  while (currentNode !== null) {\n    const nextNode = currentNode.next;\n    currentNode.next = previousNode;\n    previousNode = currentNode;\n    currentNode = nextNode;\n  }\n  return previousNode;\n}\n","import Board from './Board/Board.jsx';\n\nimport './App.css';\n\nconst App = () => (\n  <div className=\"App\">\n    \n    <Board></Board>\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}